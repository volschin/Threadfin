name: Threadfin Build
on:
  push:
    branches:
      - main
      - dev
    tags: "v1.*"
  pull_request_target:
    branches: ["main"]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
  
permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - name: Check out code into the Go module directory
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0

      - name: Set up and Build
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version: '1.22'
        id: go
      - name: Build Binaries
        run: |
         go version && go mod tidy && go mod vendor
         echo "Building Linux"
         env GOOS=linux GOARCH=arm64 go build -o dist/Threadfin_linux_arm64
         env GOOS=linux GOARCH=amd64 go build -o dist/Threadfin_linux_amd64
         echo "Building FreeBSD"
         env GOOS=freebsd GOARCH=amd64 go build -o dist/Threadfin_freebsd_amd64
         env GOOS=freebsd GOARCH=arm go build -o dist/Threadfin_freebsd_arm
         echo "Building Macos"
         env GOOS=darwin GOARCH=arm64 go build -o dist/Threadfin_darwin_arm64
         env GOOS=darwin GOARCH=amd64 go build -o dist/Threadfin_darwin_amd64
         echo "Building Windows"
         env GOOS=windows GOARCH=amd64 go build -o dist/Threadfin_windows_amd64.exe

      - name: Login to Docker Hub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log into GitHub Container Registry
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Install Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0

      - id: docker_meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge

      - name: Build and Push container images
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        id: build-and-push
        with:
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
  
      - name: Sign the images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
   
#      - name: Release
#        uses: "marvinpinto/action-automatic-releases@latest"
#        with:
#          repo_token: "${{ secrets.GITHUB_TOKEN }}"
#          prerelease: false
#          files: dist/*

      - name: Cleanup old containers
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5.0.0
        with: 
          package-name: 'threadfin'
          package-type: 'container'
          min-versions-to-keep: 50
          delete-only-untagged-versions: 'true'
#          delete-only-pre-release-versions: "true"
